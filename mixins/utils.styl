// @import './layouts'

remixicon()
    @import url('https://cdn.jsdelivr.net/npm/remixicon@2.2.0/fonts/remixicon.css')

boxicon()
    @import url('https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css')


print(thing)
    p(thing)

log(thing)
    p(thing)

debug()
    body *
        bgclr #4bab4b74 !important
        outline 2px solid black !important
        clr black !important

// TODO: custom colors (with var(--))?
debugLive() // Need to import script in html file. Toggle keybind: CTRL+D
    .debugLive
        &Container
            pos fixed
            z-index 999999999
            bottom 0 unless arguments
            right 0 unless arguments
            for arg in arguments
                {arg} 0
            display flex !important
            align-items center
            mg 1rem
        &Input
            &:checked + label::before
                content '\eb58'
        &Label
            pb .5em
            pi 1em
            bgclr red !important
            clr white !important
            rad .25em
            dflex aic .25em
            &::selection
                bgclr transparent
            &::before
                content '\eb76'
                ffam 'remixicon' !important


importfont(names, weights = 400, type = '')
    // for name in names

    names = unquote(replace(' ', '+', names))
    filteredWeights = ()

    if type
        setWeight = unquote('wght@')
        setType = unquote(":ital,")
    else
        setWeight = unquote(':wght@')
        setType = ()

    for weight in weights
        if weight % 100 == 0
            if type == unquote('italic')
                push(filteredWeights, s("0,%s", weight))
            else
                push(filteredWeights, weight)

    if type == unquote('italic')
        for weight in weights // set the proper format if italic
            if weight % 100 == 0
                push(filteredWeights, s("1,%s", weight))


    weights = unquote(setWeight) + unquote(join(";", filteredWeights))
    s("@import url('https://fonts.googleapis.com/css2?family=%s%s%s&display=swap');", names, setType, weights)
  

reset()
    @layer reset
        *, *::before, *::after
            pg 0
            mg 0
            box-sizing border-box
        
        img
            maxw 100
            dblock()
        
        h1,h2,h3,h4,h5,h6
            line-height 1.1
            letter-spacing -1px
        
        p
            line-height 1.5
        
        // form elements
        input:not([type="checkbox"]), label
            dblock()
            w 100%
        
        label
            w fit-content
        
        input, button, textarea
            ffam inherit
        
        label, button
            cursor pointer
        
        ul, ol
            list-style-position inside

        body
            ffam 'Readex Pro', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif
            text-rendering optimizeLegibility
            overflow-x clip
            scroll-behavior smooth

focus()
    a:focus-visible, [tabindex]:focus-visible, input:focus-visible, textarea:focus-visible, button:focus-visible
        outline 0
        {block}
    
scrollbar(params) // Only supported in Chrome

    if params.size
        &::-webkit-scrollbar
            w params.size
            h @width
    
    if params.track
        &::-webkit-scrollbar-track
            bgclr params.track
    
    if params.thumb
        &::-webkit-scrollbar-thumb
            bgclr params.thumb
            if margin in arguments
                rad 1em
                background-clip padding-box
                border params.margin * 1px solid #0000

        &::-webkit-scrollbar-thumb:hover
            if params.hover
                bgclr params.hover
            else
                bgclr darken(params.thumb, 10%)
    
        &::-webkit-scrollbar-thumb:active
            if active in arguments
                bgclr params.active
            else
                bgclr darken(params.thumb, 20%)

selection()
    &::selection
        bgclr arguments[0]
        clr arguments[1]

clr()
    color arguments

bg()
    background arguments
bgclr()
    background-color arguments
bgimg()
    background-image arguments
bgblur(value)
    backdrop-filter blur(value)
    -webkit-backdrop-filter blur(value)
bgclip()
    background-clip arguments
    -webkit-background-clip text


isolate()
    isolation isolate

lgradient()
    bgimg linear-gradient(arguments)
rgradient()
    bgimg radial-gradient(arguments)
textgradient()
    lgradient(arguments)
    bgclip text
    -webkit-text-fill-color transparent    


setopacity(clr, amount)
    rgba(clr, amount)
opacify(clr, amount)
    rgba(clr, amount)